---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app nzbget
  namespace: default
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: nzbget
      version: 12.4.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controller:
      type: statefulset
      annotations:
        reloader.stakater.com/auto: "true"
    image:
      repository: ghcr.io/k8s-at-home/nzbget
      tag: v21.1
    env:
      TZ: "${TIMEZONE}"
    ingress:
      main:
        enabled: true
        ingressClassName: nginx
        annotations:
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          external-dns.home.arpa/enabled: "true"
          hajimari.io/icon: mdi:cloud-download
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
          - host: &host-local "{{ .Release.Name }}.${LOCAL_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
          - hosts:
              - *host-local
    volumeClaimTemplates:
      - name: config
        mountPath: /config
        accessMode: ReadWriteOnce
        size: 1Gi
        storageClass: ceph-block
        labels:
          snapshot.home.arpa/enabled: "true"
    persistence:
      series:
        enabled: true
        type: nfs
        server: server-pc.lan
        path: ${SERIES_PATH}
        mountPath: /series
      movies:
        enabled: true
        type: nfs
        server: server-pc.lan
        path: ${MOVIES_PATH}
        mountPath: /movies
      downloads:
        enabled: true
        type: nfs
        server: server-pc.lan
        path: ${DOWNLOADS_PATH}
        mountPath: /downloads
    securityContext:
      runAsUser: ${NFS_USER_ID}
      runAsGroup: ${NFS_GROUP_ID}
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: arr
                  operator: In
                  values:
                    - "true"
