apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-production
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: "${SECRET_CLOUDFLARE_EMAIL}"
    privateKeySecretRef:
      name: letsencrypt-production
    solvers:
      - dns01:
          cloudflare:
            email: "${SECRET_CLOUDFLARE_EMAIL}"
            apiKeySecretRef:
              name: cert-manager-secret
              key: api-key
        selector:
          dnsZones:
            - "${SECRET_DOMAIN}"
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: "${SECRET_CLOUDFLARE_EMAIL}"
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
      - dns01:
          cloudflare:
            email: "${SECRET_CLOUDFLARE_EMAIL}"
            apiKeySecretRef:
              name: cert-manager-secret
              key: api-key
        selector:
          dnsZones:
            - "${SECRET_DOMAIN}"
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: my-ca-issuer
  namespace: networking
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: self-ca-tls
  namespace: networking
spec:
  # name of the tls secret to store
  # the generated certificate/key pair
  secretName: self-tls-ca-key-pair
  isCA: true
  issuerRef:
    # issuer created in step 1
    name: self-ca-issuer
    kind: Issuer
  commonName: "${LOCAL_DOMAIN}"
  dnsNames:
  # one or more fully-qualified domain name
  # can be defined here
    - ${LOCAL_DOMAIN}
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: self-deployment-tls
  namespace: networking
spec:
  ca:
    secretName: self-tls-ca-key-pair
#---
#apiVersion: cert-manager.io/v1
#kind: ClusterIssuer
#metadata:
#  name: selfsigned-issuer
#spec:
#  selfSigned: {}
